using System;
using System.Runtime.CompilerServices;
using ComplexBreeding;
using ComplexBreeding.Essences;
using ComplexBreeding.Traits;
using MBMScripts;

namespace CBforDummies.Patches
{
	// Token: 0x02000008 RID: 8
	[NullableContext(1)]
	[Nullable(0)]
	public class CheckNewSpeciesImpregnationPatch
	{
		// Token: 0x06000011 RID: 17 RVA: 0x00002233 File Offset: 0x00000433
		public static bool Prefix(Character female, Character male)
		{
			return false;
		}

		// Token: 0x06000012 RID: 18 RVA: 0x00002238 File Offset: 0x00000438
		public static void Postfix(Character female, Character male, ref bool __result)
		{
			string text = "Angel";
			ERace race = female.Race;
			female.Race = ERace.Human;
			female.GetPregnant(CheckNewSpeciesImpregnationPatch.GetFakeHumanMaleForWomenBirth2(male, text));
			female.Race = race;
			__result = true;
		}

		// Token: 0x06000013 RID: 19 RVA: 0x00002270 File Offset: 0x00000470
		private static Client GetFakeHumanMaleForWomenBirth2(Character male, string speciesName)
		{
			Client client = new Client(male.UnitId)
			{
				EyeColor = male.EyeColor,
				HairColor = male.SkinColor,
				SkinColor = male.SkinColor,
				DisplayName = speciesName
			};
			client.OnEnableTrait();
			client.ClearRaceTrait();
			client.ClearTrait();
			foreach (IEssenceData essenceData in GameData.EssencesDataList)
			{
				float traitValue = male.GetTraitValue(essenceData.ReplacedTrait);
				client.AddTrait(essenceData.ReplacedTrait);
				client.AddTraitValue(essenceData.ReplacedTrait, traitValue);
			}
			foreach (ITraitData traitData in GameData.TraitsDataList)
			{
				if (male.TraitContains(traitData.ReplacedTrait))
				{
					client.AddRaceTrait(traitData.ReplacedTrait);
				}
			}
			return client;
		}
	}
}
