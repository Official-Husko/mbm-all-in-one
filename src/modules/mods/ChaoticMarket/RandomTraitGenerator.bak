using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using MBMModsServices;
using MBMScripts;

namespace ChaoticMarket.RandomTraitGeneration
{
	// Token: 0x02000009 RID: 9
	[NullableContext(1)]
	[Nullable(0)]
	public class RandomTraitGenerator
	{
		// Token: 0x0600000C RID: 12 RVA: 0x0000240D File Offset: 0x0000060D
		public RandomTraitGenerator(RandomTraitConfig randomTraitConfig)
		{
			this.RandomTraitConfig = randomTraitConfig;
			this.CharacterTypeTraitGenerator = new Dictionary<EUnitType, RandomTraitGeneratorSpecificCharacter>();
			this.UpdateCharacterTypeTraitGenerators();
		}

		// Token: 0x0600000D RID: 13 RVA: 0x00002430 File Offset: 0x00000630
		public void UpdateCharacterTypeTraitGenerators()
		{
			foreach (EUnitType eunitType in UnitTypeUtility.NormalUnitTypes)
			{
				if (this.CharacterTypeTraitGenerator.ContainsKey(eunitType))
				{
					this.CharacterTypeTraitGenerator[eunitType] = this.RandomTraitConfig.GenerateSpecificRandomTraitGenerator(eunitType);
				}
				else
				{
					this.CharacterTypeTraitGenerator.Add(eunitType, this.RandomTraitConfig.GenerateSpecificRandomTraitGenerator(eunitType));
				}
			}
		}

		// Token: 0x0600000E RID: 14 RVA: 0x000024B8 File Offset: 0x000006B8
		public void GenerateRandomTraits(Character character)
		{
			RandomTraitGeneratorSpecificCharacter randomTraitGeneratorSpecificCharacter;
			this.CharacterTypeTraitGenerator.TryGetValue(character.UnitType, out randomTraitGeneratorSpecificCharacter);
			if (randomTraitGeneratorSpecificCharacter != null)
			{
				randomTraitGeneratorSpecificCharacter.GenerateRandomTraitForCharacter(character);
			}
		}

		// Token: 0x0400000E RID: 14
		private Dictionary<EUnitType, RandomTraitGeneratorSpecificCharacter> CharacterTypeTraitGenerator;

		// Token: 0x0400000F RID: 15
		private RandomTraitConfig RandomTraitConfig;
	}
}
