using System;
using System.Runtime.CompilerServices;
using BepInEx;
using BepInEx.Configuration;
using BepInEx.Core.Logging.Interpolation;
using BepInEx.Logging;
using BepInEx.Unity.Mono;
using HarmonyLib;
using MBMScripts;

namespace NoTitsLimit
{
	// Token: 0x02000006 RID: 6
	[NullableContext(1)]
	[Nullable(0)]
	[BepInPlugin("com.Surgy.NoTitsLimit", "NoTitsLimit", "2.0.0")]
	public class NoTitsLimitPlugin : BaseUnityPlugin
	{
		// Token: 0x06000006 RID: 6 RVA: 0x000020A0 File Offset: 0x000002A0
		public NoTitsLimitPlugin()
		{
			NoTitsLimitPlugin.log = base.Logger;
			NoTitsLimitPlugin.Enabled = base.Config.Bind<bool>(new ConfigDefinition("General", "Enabled"), false, new ConfigDescription("Enables NoTitsLimit plugin (after game restart).", null, Array.Empty<object>()));
			NoTitsLimitPlugin.Enabled.SettingChanged += this.Enabled_Changed;
		}

		// Token: 0x06000007 RID: 7 RVA: 0x00002104 File Offset: 0x00000304
		private void Enabled_Changed([Nullable(2)] object sender, EventArgs e)
		{
			this.ConfigureActions();
		}

		// Token: 0x06000008 RID: 8 RVA: 0x0000210C File Offset: 0x0000030C
		private void ConfigureActions()
		{
			base.Logger.LogMessage("NoTitsLimit is " + (NoTitsLimitPlugin.Enabled.Value ? "enabled" : "disabled") + ".");
		}

		// Token: 0x06000009 RID: 9 RVA: 0x00002140 File Offset: 0x00000340
		private void Awake()
		{
			this.ConfigureActions();
			try
			{
				if (NoTitsLimitPlugin.Enabled.Value)
				{
					ManualLogSource logger = base.Logger;
					bool flag;
					BepInExInfoLogInterpolatedStringHandler bepInExInfoLogInterpolatedStringHandler = new BepInExInfoLogInterpolatedStringHandler(30, 1, out flag);
					if (flag)
					{
						bepInExInfoLogInterpolatedStringHandler.AppendLiteral("Installing ");
						bepInExInfoLogInterpolatedStringHandler.AppendFormatted<string>("NoTitsLimit");
						bepInExInfoLogInterpolatedStringHandler.AppendLiteral(" Harmony patches...");
					}
					logger.LogInfo(bepInExInfoLogInterpolatedStringHandler);
					new Harmony("com.Surgy.NoTitsLimit").PatchAll(typeof(NoTitsLimitPlugin));
					ManualLogSource logger2 = base.Logger;
					bepInExInfoLogInterpolatedStringHandler = new BepInExInfoLogInterpolatedStringHandler(28, 1, out flag);
					if (flag)
					{
						bepInExInfoLogInterpolatedStringHandler.AppendFormatted<string>("NoTitsLimit");
						bepInExInfoLogInterpolatedStringHandler.AppendLiteral(" Harmony patches successful.");
					}
					logger2.LogInfo(bepInExInfoLogInterpolatedStringHandler);
				}
			}
			catch
			{
				ManualLogSource logger3 = base.Logger;
				bool flag;
				BepInExErrorLogInterpolatedStringHandler bepInExErrorLogInterpolatedStringHandler = new BepInExErrorLogInterpolatedStringHandler(24, 1, out flag);
				if (flag)
				{
					bepInExErrorLogInterpolatedStringHandler.AppendFormatted<string>("NoTitsLimit");
					bepInExErrorLogInterpolatedStringHandler.AppendLiteral(" Harmony patches failed!");
				}
				logger3.LogError(bepInExErrorLogInterpolatedStringHandler);
			}
		}

		// Token: 0x0600000A RID: 10 RVA: 0x0000222C File Offset: 0x0000042C
		[HarmonyPatch(typeof(Character), "TitsType", MethodType.Getter)]
		[HarmonyPrefix]
		public unsafe static bool Character_get_TitsType(ref int __result, Character __instance)
		{
			__result = *NoTitsLimitPlugin.m_TitsTypeRef(__instance);
			return false;
		}

		// Token: 0x04000004 RID: 4
		public const string AUTHOR = "Surgy";

		// Token: 0x04000005 RID: 5
		public const string GUID = "com.Surgy.NoTitsLimit";

		// Token: 0x04000006 RID: 6
		[Nullable(2)]
		public static ManualLogSource log;

		// Token: 0x04000007 RID: 7
		[Nullable(2)]
		public static ConfigEntry<bool> Enabled;

		// Token: 0x04000008 RID: 8
		private static readonly AccessTools.FieldRef<Character, int> m_TitsTypeRef = AccessTools.FieldRefAccess<Character, int>("m_TitsType");
	}
}
